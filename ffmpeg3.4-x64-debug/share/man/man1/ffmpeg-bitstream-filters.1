.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "FFMPEG-BITSTREAM-FILTERS 1"
.TH FFMPEG-BITSTREAM-FILTERS 1 " " " " " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
ffmpeg\-bitstream\-filters
 \- FFmpeg bitstream filters
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This document describes the bitstream filters provided by the
libavcodec library.
.PP
A bitstream filter operates on the encoded stream data, and performs
bitstream level modifications without performing decoding.
.SH "BITSTREAM FILTERS"
.IX Header "BITSTREAM FILTERS"
When you configure your FFmpeg build, all the supported bitstream
filters are enabled by default. You can list all available ones using
the configure option \f(CW\*(C`\-\-list\-bsfs\*(C'\fR.
.PP
You can disable all the bitstream filters using the configure option
\&\f(CW\*(C`\-\-disable\-bsfs\*(C'\fR, and selectively enable any bitstream filter using
the option \f(CW\*(C`\-\-enable\-bsf=BSF\*(C'\fR, or you can disable a particular
bitstream filter using the option \f(CW\*(C`\-\-disable\-bsf=BSF\*(C'\fR.
.PP
The option \f(CW\*(C`\-bsfs\*(C'\fR of the ff* tools will display the list of
all the supported bitstream filters included in your build.
.PP
The ff* tools have a \-bsf option applied per stream, taking a
comma-separated list of filters, whose parameters follow the filter
name after a '='.
.PP
.Vb 1
\&        ffmpeg \-i INPUT \-c:v copy \-bsf:v filter1[=opt1=str1:opt2=str2][,filter2] OUTPUT
.Ve
.PP
Below is a description of the currently available bitstream filters,
with their parameters, if any.
.SS aac_adtstoasc
.IX Subsection "aac_adtstoasc"
Convert MPEG\-2/4 AAC ADTS to an MPEG\-4 Audio Specific Configuration
bitstream.
.PP
This filter creates an MPEG\-4 AudioSpecificConfig from an MPEG\-2/4
ADTS header and removes the ADTS header.
.PP
This filter is required for example when copying an AAC stream from a
raw ADTS AAC or an MPEG-TS container to MP4A\-LATM, to an FLV file, or
to MOV/MP4 files and related formats such as 3GP or M4A. Please note
that it is auto-inserted for MP4A\-LATM and MOV/MP4 and related formats.
.SS chomp
.IX Subsection "chomp"
Remove zero padding at the end of a packet.
.SS dca_core
.IX Subsection "dca_core"
Extract the core from a DCA/DTS stream, dropping extensions such as
DTS-HD.
.SS dump_extra
.IX Subsection "dump_extra"
Add extradata to the beginning of the filtered packets.
.PP
The additional argument specifies which packets should be filtered.
It accepts the values:
.IP \fBa\fR 4
.IX Item "a"
add extradata to all key packets, but only if \fIlocal_header\fR is
set in the \fBflags2\fR codec context field
.IP \fBk\fR 4
.IX Item "k"
add extradata to all key packets
.IP \fBe\fR 4
.IX Item "e"
add extradata to all packets
.PP
If not specified it is assumed \fBk\fR.
.PP
For example the following \fBffmpeg\fR command forces a global
header (thus disabling individual packet headers) in the H.264 packets
generated by the \f(CW\*(C`libx264\*(C'\fR encoder, but corrects them by adding
the header stored in extradata to the key packets:
.PP
.Vb 1
\&        ffmpeg \-i INPUT \-map 0 \-flags:v +global_header \-c:v libx264 \-bsf:v dump_extra out.ts
.Ve
.SS extract_extradata
.IX Subsection "extract_extradata"
Extract the in-band extradata.
.PP
Certain codecs allow the long-term headers (e.g. MPEG\-2 sequence headers,
or H.264/HEVC (VPS/)SPS/PPS) to be transmitted either "in-band" (i.e. as a part
of the bitstream containing the coded frames) or "out of band" (e.g. on the
container level). This latter form is called "extradata" in FFmpeg terminology.
.PP
This bitstream filter detects the in-band headers and makes them available as
extradata.
.IP \fBremove\fR 4
.IX Item "remove"
When this option is enabled, the long-term headers are removed from the
bitstream after extraction.
.SS h264_mp4toannexb
.IX Subsection "h264_mp4toannexb"
Convert an H.264 bitstream from length prefixed mode to start code
prefixed mode (as defined in the Annex B of the ITU-T H.264
specification).
.PP
This is required by some streaming formats, typically the MPEG\-2
transport stream format (muxer \f(CW\*(C`mpegts\*(C'\fR).
.PP
For example to remux an MP4 file containing an H.264 stream to mpegts
format with \fBffmpeg\fR, you can use the command:
.PP
.Vb 1
\&        ffmpeg \-i INPUT.mp4 \-codec copy \-bsf:v h264_mp4toannexb OUTPUT.ts
.Ve
.PP
Please note that this filter is auto-inserted for MPEG-TS (muxer
\&\f(CW\*(C`mpegts\*(C'\fR) and raw H.264 (muxer \f(CW\*(C`h264\*(C'\fR) output formats.
.SS hevc_mp4toannexb
.IX Subsection "hevc_mp4toannexb"
Convert an HEVC/H.265 bitstream from length prefixed mode to start code
prefixed mode (as defined in the Annex B of the ITU-T H.265
specification).
.PP
This is required by some streaming formats, typically the MPEG\-2
transport stream format (muxer \f(CW\*(C`mpegts\*(C'\fR).
.PP
For example to remux an MP4 file containing an HEVC stream to mpegts
format with \fBffmpeg\fR, you can use the command:
.PP
.Vb 1
\&        ffmpeg \-i INPUT.mp4 \-codec copy \-bsf:v hevc_mp4toannexb OUTPUT.ts
.Ve
.PP
Please note that this filter is auto-inserted for MPEG-TS (muxer
\&\f(CW\*(C`mpegts\*(C'\fR) and raw HEVC/H.265 (muxer \f(CW\*(C`h265\*(C'\fR or
\&\f(CW\*(C`hevc\*(C'\fR) output formats.
.SS imxdump
.IX Subsection "imxdump"
Modifies the bitstream to fit in MOV and to be usable by the Final Cut
Pro decoder. This filter only applies to the mpeg2video codec, and is
likely not needed for Final Cut Pro 7 and newer with the appropriate
\&\fB\-tag:v\fR.
.PP
For example, to remux 30 MB/sec NTSC IMX to MOV:
.PP
.Vb 1
\&        ffmpeg \-i input.mxf \-c copy \-bsf:v imxdump \-tag:v mx3n output.mov
.Ve
.SS mjpeg2jpeg
.IX Subsection "mjpeg2jpeg"
Convert MJPEG/AVI1 packets to full JPEG/JFIF packets.
.PP
MJPEG is a video codec wherein each video frame is essentially a
JPEG image. The individual frames can be extracted without loss,
e.g. by
.PP
.Vb 1
\&        ffmpeg \-i ../some_mjpeg.avi \-c:v copy frames_%d.jpg
.Ve
.PP
Unfortunately, these chunks are incomplete JPEG images, because
they lack the DHT segment required for decoding. Quoting from
<\fBhttp://www.digitalpreservation.gov/formats/fdd/fdd000063.shtml\fR>:
.PP
Avery Lee, writing in the rec.video.desktop newsgroup in 2001,
commented that "MJPEG, or at least the MJPEG in AVIs having the
MJPG fourcc, is restricted JPEG with a fixed \-\- and *omitted* \-\-
Huffman table. The JPEG must be YCbCr colorspace, it must be 4:2:2,
and it must use basic Huffman encoding, not arithmetic or
progressive. . . . You can indeed extract the MJPEG frames and
decode them with a regular JPEG decoder, but you have to prepend
the DHT segment to them, or else the decoder won't have any idea
how to decompress the data. The exact table necessary is given in
the OpenDML spec."
.PP
This bitstream filter patches the header of frames extracted from an MJPEG
stream (carrying the AVI1 header ID and lacking a DHT segment) to
produce fully qualified JPEG images.
.PP
.Vb 3
\&        ffmpeg \-i mjpeg\-movie.avi \-c:v copy \-bsf:v mjpeg2jpeg frame_%d.jpg
\&        exiftran \-i \-9 frame*.jpg
\&        ffmpeg \-i frame_%d.jpg \-c:v copy rotated.avi
.Ve
.SS mjpegadump
.IX Subsection "mjpegadump"
Add an MJPEG A header to the bitstream, to enable decoding by
Quicktime.
.SS mov2textsub
.IX Subsection "mov2textsub"
Extract a representable text file from MOV subtitles, stripping the
metadata header from each subtitle packet.
.PP
See also the \fBtext2movsub\fR filter.
.SS mp3decomp
.IX Subsection "mp3decomp"
Decompress non-standard compressed MP3 audio headers.
.SS mpeg4_unpack_bframes
.IX Subsection "mpeg4_unpack_bframes"
Unpack DivX-style packed B\-frames.
.PP
DivX-style packed B\-frames are not valid MPEG\-4 and were only a
workaround for the broken Video for Windows subsystem.
They use more space, can cause minor AV sync issues, require more
CPU power to decode (unless the player has some decoded picture queue
to compensate the 2,0,2,0 frame per packet style) and cause
trouble if copied into a standard container like mp4 or mpeg\-ps/ts,
because MPEG\-4 decoders may not be able to decode them, since they are
not valid MPEG\-4.
.PP
For example to fix an AVI file containing an MPEG\-4 stream with
DivX-style packed B\-frames using \fBffmpeg\fR, you can use the command:
.PP
.Vb 1
\&        ffmpeg \-i INPUT.avi \-codec copy \-bsf:v mpeg4_unpack_bframes OUTPUT.avi
.Ve
.SS noise
.IX Subsection "noise"
Damages the contents of packets or simply drops them without damaging the
container. Can be used for fuzzing or testing error resilience/concealment.
.PP
Parameters:
.IP \fBamount\fR 4
.IX Item "amount"
A numeral string, whose value is related to how often output bytes will
be modified. Therefore, values below or equal to 0 are forbidden, and
the lower the more frequent bytes will be modified, with 1 meaning
every byte is modified.
.IP \fBdropamount\fR 4
.IX Item "dropamount"
A numeral string, whose value is related to how often packets will be dropped.
Therefore, values below or equal to 0 are forbidden, and the lower the more
frequent packets will be dropped, with 1 meaning every packet is dropped.
.PP
The following example applies the modification to every byte but does not drop
any packets.
.PP
.Vb 1
\&        ffmpeg \-i INPUT \-c copy \-bsf noise[=1] output.mkv
.Ve
.SS null
.IX Subsection "null"
This bitstream filter passes the packets through unchanged.
.SS remove_extra
.IX Subsection "remove_extra"
Remove extradata from packets.
.PP
It accepts the following parameter:
.IP \fBfreq\fR 4
.IX Item "freq"
Set which frame types to remove extradata from.
.RS 4
.IP \fBk\fR 4
.IX Item "k"
Remove extradata from non-keyframes only.
.IP \fBkeyframe\fR 4
.IX Item "keyframe"
Remove extradata from keyframes only.
.IP "\fBe, all\fR" 4
.IX Item "e, all"
Remove extradata from all frames.
.RE
.RS 4
.RE
.SS text2movsub
.IX Subsection "text2movsub"
Convert text subtitles to MOV subtitles (as used by the \f(CW\*(C`mov_text\*(C'\fR
codec) with metadata headers.
.PP
See also the \fBmov2textsub\fR filter.
.SS vp9_superframe
.IX Subsection "vp9_superframe"
Merge VP9 invisible (alt-ref) frames back into VP9 superframes. This
fixes merging of split/segmented VP9 streams where the alt-ref frame
was split from its visible counterpart.
.SS vp9_superframe_split
.IX Subsection "vp9_superframe_split"
Split VP9 superframes into single frames.
.SS vp9_raw_reorder
.IX Subsection "vp9_raw_reorder"
Given a VP9 stream with correct timestamps but possibly out of order,
insert additional show-existing-frame packets to correct the ordering.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBffmpeg\fR\|(1), \fBffplay\fR\|(1), \fBffprobe\fR\|(1), \fBffserver\fR\|(1), \fBlibavcodec\fR\|(3)
.SH AUTHORS
.IX Header "AUTHORS"
The FFmpeg developers.
.PP
For details about the authorship, see the Git history of the project
(https://git.ffmpeg.org/ffmpeg), e.g. by typing the command
\&\fBgit log\fR in the FFmpeg source directory, or browsing the
online repository at <\fBhttps://git.ffmpeg.org/ffmpeg\fR>.
.PP
Maintainers for the specific components are listed in the file
\&\fIMAINTAINERS\fR in the source code tree.
